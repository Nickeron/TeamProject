@model MessengerViewModel
@{
	ViewData["Title"] = "Messenger";
}
<link href="~/css/reset.css" rel="stylesheet prefetch" />
<link href="~/css/messenger.css" rel="stylesheet" />

<div id="frame">
	<div id="sidepanel">
		<div id="profile">
			<div class="wrap">
				<img id="profile-img" src="@Model.ThisUser.UserAvatar" class="online" alt="" />

				<p title="@Model.ThisUser.Id" id="userName">@Model.ThisUser.FirstName @Model.ThisUser.LastName</p>
				@*<i class="fa fa-chevron-down expand-button" aria-hidden="true"></i>*@
				<div id="status-options">
					<ul>
						<li id="status-online" class="active"><span class="status-circle"></span> <p>Online</p></li>
						<li id="status-away"><span class="status-circle"></span> <p>Away</p></li>
						<li id="status-busy"><span class="status-circle"></span> <p>Busy</p></li>
						<li id="status-offline"><span class="status-circle"></span> <p>Offline</p></li>
					</ul>
				</div>
			</div>
		</div>
		<div id="contacts">
			<ul>
				@foreach (UserChatModel userChat in Model.FriendsAndMessages)
				{
					var lastText = userChat.CorrespondantsMessages.LastOrDefault();
					var unreadCount = userChat.UnreadReceived;
					<li class="contact" title="@userChat.Correspondant.Id" id="friend-panel-@userChat.Correspondant.Id" onclick="setActiveUser('@userChat.Correspondant.Id')">
						<div class="wrap">
							<span class="contact-status offline"></span>
							<img src="@userChat.Correspondant.UserAvatar" alt="" />
							<div class="meta">
								<p class="name">@userChat.Correspondant.FirstName @userChat.Correspondant.LastName</p>
								@if (lastText is null)
								{
									<p class="preview">No messages</p>
								}
								else
								{
									<p class="preview">
										@lastText.MessageText
										@if (unreadCount > 0)
										{<strong class="badge badge-pill badge-danger float-right">@unreadCount</strong>}
									</p>
								}
							</div>
						</div>
					</li>
				}
			</ul>
		</div>
	</div>
	<div class="content">
		@if (Model.LatestCommunicator is null)
		{
			<div id="activeUser" title="" class="contact-profile">
				<img src="~/images/user.png" alt="" />
				<p>No Communication History</p>
			</div>
			<div class="messages">
				<ul id="active-user-messages"></ul>
			</div>
		}
		else
		{
			<div id="activeUser" title="@Model.LatestCommunicator.Id" class="contact-profile">
				<img src="@Model.LatestCommunicator.UserAvatar" alt="" />
				<p>
					@Model.LatestCommunicator.FirstName @Model.LatestCommunicator.LastName
					@if (Model.UnreadLatest > 0)
					{
						<span class="badge badge-pill badge-danger">@Model.UnreadLatest</span>
					}
				</p>
			</div>
			<div class="messages" onclick="readMessages()">
				<ul id="active-user-messages">
					@foreach (Message message in Model.FriendsAndMessages.Where(m => m.Correspondant.Id == Model.LatestCommunicator.Id).SelectMany(u => u.CorrespondantsMessages))
					{
						if (message.Sender.Id == Model.ThisUser.Id)
						{
							<li class="sent">
								<img src="@Model.ThisUser.UserAvatar" alt="" />
								<p class="message-text" title="@message.MessageDate">@message.MessageText</p>
							</li>
						}
						else
						{
							<li class="replies">
								<img src="@Model.LatestCommunicator.UserAvatar" alt="" />
								<p class="message-text" title="@message.MessageDate">@message.MessageText</p>
							</li>
						}
					}
				</ul>
			</div>
		}
		<div class="message-input">
			<div class="wrap">
				<input id="messageInput" type="text" placeholder="Write your message..." />
				@*<i class="fa fa-paperclip attachment" aria-hidden="true"></i>*@
				<button id="sendButton" class="submit" onclick="SendNewMessage()"><i class="fa fa-paper-plane" aria-hidden="true"></i></button>
			</div>
		</div>
	</div>
</div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/signalr/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>

	$(".messages").animate({ scrollTop: $(document).height() }, "fast");
	let thisUserID = document.getElementById("userName").title;

	async function setActiveUser(userID)
	{
		const messageModel = await sendData("@Url.Action("Chat", "Messenger")", userID);
		const ulMessages = document.getElementById("active-user-messages");
		ulMessages.innerHTML = "";

		const activeUserElement = document.getElementById("activeUser");
		activeUserElement.title = userID;
		activeUserElement.firstElementChild.setAttribute("src", messageModel.correspondant.userAvatar);
		activeUserElement.lastElementChild.innerHTML = messageModel.correspondant.firstName + " " + messageModel.correspondant.lastName;

		const comMessages = messageModel.correspondantsMessages;
		for (const key in comMessages) {
			if (comMessages.hasOwnProperty(key)) {
				const message = comMessages[key];
				const li = document.createElement("li");
				const img = document.createElement("img");
				const p = document.createElement("p");

				img.setAttribute("src", message.sender.userAvatar);
				p.innerHTML = message.messageText;
				if (message.sender.id === thisUserID) {
					li.setAttribute("class", "sent");
				}
				else {
					li.setAttribute("class", "replies");
				}
				li.appendChild(img);
				li.appendChild(p);
				ulMessages.appendChild(li);
			}
		}
	}

	async function readMessages()
	{

	}

	function sendRequest(userId, message)
	{
		let data =
			{
				receiverID: userId,
				messageText: message
			};

		sendData("@Url.Action("SendMessage", "Messenger")", data);
	}
</script>

