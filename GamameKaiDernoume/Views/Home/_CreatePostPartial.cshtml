@model MyWallViewModel

<div class="modal fade" id="createPost" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">What's in your mind?</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form>
					<select name="scope" id="scope" onchange="changeScope(this)">
						<option value=0 selected>Global</option>
						<option value=1>Personal</option>
					</select>
					<p id="interests-off-post">
						@foreach (Interest interest in Model.Interests)
						{
							<span class="badge badge-secondary" onclick="toggleInterest(this)">@interest.InterestCategory</span>
						}
					</p>
					<p id="interests-in-post"></p>
					<div class="form-group">
						<label for="postText" class="col-form-label">Say something..</label>
						<input id="postText" type="text" class="form-control">
						<label for="postImage" class="col-form-label">Add an image..</label>
						<input id="postImage" type="file" class="form-control" name="image">
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" onclick="sendNewPost()">Save Post</button>
			</div>
		</div>
	</div>
</div>

<script>
	let interests = [];
	let scope = 0;

	function toggleInterest(element) {
		console.log(element);
		console.log(interests);
		const offInterests = document.getElementById("interests-off-post");
		const inInterests = document.getElementById("interests-in-post");
		const index = interests.findIndex(x => x === element.innerHTML);
		if (index >= 0) {
			element.setAttribute("class", "badge badge-secondary");
			inInterests.removeChild(element);
			offInterests.appendChild(element);
			interests.splice(index, 1);
		}
		else {
			element.setAttribute("class", "badge badge-primary");
			offInterests.removeChild(element);
			inInterests.appendChild(element);
			interests.push(element.innerHTML);
		}
	}

	function changeScope(element)
	{
		scope = element.value;
	}

	async function sendNewPost()
	{
		const newPostText = document.getElementById("postText").value;

		if ($.trim(newPostText) == '') {
			alert("A post cannot be empty!");
			return false;
		}

		let input = document.querySelector('input[type="file"]')

		let data = new FormData()
		data.append('PostImage', input.files[0])
		data.append('PostText', newPostText)
		data.append('PostScope', scope)
		data.append('Interests', interests)

		const urlToSendRequest = "https://" + window.location.host + "@Url.Action("CreatePost", "Home")";

		const rawData = await fetch(urlToSendRequest,
		{
			method: 'POST',
			credentials: "same-origin",
			body: data
		});

		location.reload();
	}

	document.addEventListener('keydown', (e) => {
		if (e.which == 13) {
			sendNewPost();
			return false;
		}
	});
</script>
