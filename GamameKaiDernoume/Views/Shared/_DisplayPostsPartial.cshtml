@model MyWallViewModel
<partial name="_DeleteThisPartial" />
<partial name="_EditCommentPartial" />

@foreach (Post post in Model.Posts)
{
	<div class="jumbotron w-75 mx-auto">
		<div class="card border-info mb-3">
			<div class="card-body">
				<p class="card-title post-head">
					<img src="@post.User.UserAvatar" class="avatar rounded-circle">
					<a asp-controller="Home"
					   asp-action="Personal"
					   asp-route-username="@post.User.UserName" class="align-middle">
						<span>@post.User.FirstName @post.User.LastName</span>
					</a>
					@foreach (var interest in post.PostInterests)
					{
						<a asp-controller="Home"
						   asp-action="Index"
						   asp-route-id="@interest.Interest.InterestID"
						   class="badge badge-primary">
							@interest.Interest.InterestCategory
						</a>
					}
					@if (post.User.Id == Model.ThisUser.Id)
					{
						<i class="fas fa-times-circle fa-lg" onclick="deleteModal('post', '@post.PostID')"></i>
					}
				</p>

				<p class="text-muted">
					<time class="post-date" id="@post.PostDate"></time>

					@if (@post.PostScope == Scope.Global)
					{
						<i class="fas fa-globe"></i>
					}
					else
					{
						<i class="fas fa-user-secret"></i>
					}
				</p>
				<h2 class="card-text">
					@post.PostText
				</h2>
				@if (!(post.PostImage is null))
				{
					<img class="img-fluid rounded mx-auto d-block" src="@post.PostImage" alt="@post.PostText">
				}
				<p>
					<div class="btn-group btn-group-toggle" data-toggle="buttons">
						<label class="btn btn-outline-info">
							<i class="far fa-thumbs-up"></i>
							<input type="radio" id="Like-@post.PostID" onchange="AddReaction(@post.PostID, true)" />
							<span id="like-count-@post.PostID">@post.Reactions.Where(r => r.IsLike).ToList().Count</span>
						</label>
						<label class="btn btn-outline-info">
							<i class="far fa-thumbs-down"></i>
							<input type="radio" id="DisLike-@post.PostID" onchange="AddReaction(@post.PostID, false)">
							<span id="dislike-count-@post.PostID">@post.Reactions.Where(r => !r.IsLike).ToList().Count</span>
						</label>
					</div>
					<button type="button" class="btn btn-outline-info" data-toggle="collapse" data-target="#collapseComment-@post.PostID"><i class="fas fa-comment"></i> Comment</button>
				</p>
				<div class="collapse" id="collapseComment-@post.PostID">
					<div class="input-group mb-3">
						<input type="text" class="form-control" id="commentText-@post.PostID"
							   onkeydown="if (event.keyCode == 13) document.getElementById('commentButton-'+@post.PostID).click()" 
							   placeholder="Write a new comment.." aria-label="A new comment" aria-describedby="basic-addon2" />
						<div class="input-group-append">
							@{
								int isOP = (post.User.Id == Model.ThisUser.Id) ? 1 : 0;
							}
							<button id="commentButton-@post.PostID" onclick="CreateNewComment('@Model.ThisUser.UserAvatar', '@Model.ThisUser.FirstName @Model.ThisUser.LastName',
									@post.PostID, '@Url.Action("Personal", "Home", new { username = @Model.ThisUser.UserName })', @isOP)"
									type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#collapseComment-@post.PostID">
								Send Comment
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<ul id="listOfComments-@post.PostID" class="comments-list">
			@foreach (Comment postComment in post.Comments.OrderByDescending(p => p.CommentDate))
			{
				<li id="listItemComment-@post.PostID">
					<div class="comment-avatar"><img src="@postComment.User.UserAvatar"></div>
					<div class="comment-box">
						<div class="comment-head">
							@{
								string comment_name = (post.User.Id == postComment.User.Id) ? "comment-name by-author" : "comment-name";
							}

							<h6 class="@comment_name">
								<a asp-controller="Home"
								   asp-action="Personal"
								   asp-route-username="@postComment.User.UserName">
									@postComment.User.FirstName @postComment.User.LastName
								</a>
							</h6>

							<span class="post-date" id="@postComment.CommentDate"></span>
							@if (postComment.User.Id == Model.ThisUser.Id)
							{
								<i class="fas fa-times-circle" onclick="deleteModal('comment', '@postComment.CommentID')"></i>
								<i class="fas fa-pen-square" onclick="editModal('@postComment.CommentID', '@postComment.CommentText')"></i>
							}
						</div>
						<div class="comment-content">
							@postComment.CommentText
						</div>
					</div>
				</li>
			}
		</ul>
	</div>
}
<script src="~/lib/signalr/signalr.js"></script>
<script src="~/js/comment.js"></script>

<script defer>
	let currentUserID = "@Model.ThisUser.Id";

	 function editModal(id, previousText) {
        //Show the Modal
		 $("#editThis").modal("show");
		 $("#editText").attr("placeholder", previousText);

        $("#confirmChanges").click(async function ()
        {
            const newCommentText = document.getElementById("editText").value;
            const action = "@Url.Action("Edit", "Comment")";
            const url = "https://" + window.location.host + action;

            let data = {
                commentID: id,
                commentText: newCommentText
            };
            console.log(data);
            await sendData(url, data);

            location.reload();
        });

    }

	function deleteModal(type, id){
		// Show the Modal
		console.log(this);
		$("#deleteThis").modal("show");

		$("#confirm-delete").click(async function ()
		{

			const action = (type === 'post') ? "@Url.Action("Delete", "Post")":"@Url.Action("Delete", "Comment")";
			const url = "https://" + window.location.host + action;

			await sendData(url, id);

			location.reload();
		});
	}

	async function SendReaction(PostID, isLike) {

		let data = {
			postID: PostID,
			isLike: isLike
		};

		return await sendData("@Url.Action("AddReaction", "Post")", data);
	}

	async function SendNewCommentData(PostID)
	{
		const commentsTextElement = document.getElementById('commentText-' + PostID);
		const commentsText = commentsTextElement.value;
		commentsTextElement.value = "";

		let data = {
			postID: PostID,
			commentText: commentsText
		};

		return await sendData("@Url.Action("AddToPost", "Comment")", data);
	}

</script>